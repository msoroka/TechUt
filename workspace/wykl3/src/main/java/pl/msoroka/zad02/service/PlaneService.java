package pl.msoroka.zad02.service;

import pl.msoroka.zad02.domain.Plane;

import java.sql.*;
import java.util.List;

public class PlaneService {
    private final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
    private final Connection connection;
    private final Statement statement;
    private boolean tableExists = false;
    PreparedStatement createPersonTablePStmt;
    PreparedStatement insertPersonPStmt;
    PreparedStatement deletePersonsPStmt;

    public PlaneService() throws SQLException {
        connection = DriverManager.getConnection(URL);
        statement = connection.createStatement();

        createPersonTablePStmt = connection.prepareStatement("CREATE TABLE Plane (id bigint GENERATED BY DEFAULT AS IDENTITY, producer VARCHAR(30), capacity INT, produceDate DATE, combustion DOUBLE)");
        insertPersonPStmt = connection.prepareStatement("INSERT INTO Plane(producer, capacity, produceDate, combustion) VALUES(?, ?, ?, ?)");
        deletePersonsPStmt = connection.prepareStatement("DELETE FROM Plane");

        ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

        while (rs.next()) {
            if ("Plane".equalsIgnoreCase(rs.getString("table_name"))) {
                tableExists = true;

                break;
            }
        }

        if (!tableExists) {
            createPersonTablePStmt.executeUpdate();
        }
    }

    public void addPlane(Plane plane) throws SQLException {
        insertPersonPStmt.setString(1, plane.getProducer());
        insertPersonPStmt.setInt(2, plane.getCapacity());
        insertPersonPStmt.setDate(3, plane.getProduceDate());
        insertPersonPStmt.setDouble(4, plane.getCombustion());

        insertPersonPStmt.executeUpdate();
    }

    public void showAllPlanes() throws SQLException {
        String allPlanes = "SELECT * FROM Plane";

        ResultSet rs = statement.executeQuery(allPlanes);

        while (rs.next()) {
            System.out.println("Producer: " + rs.getString("producer") + "\nProduction date: " + rs.getDate("produceDate") + "\nCapacity: " + rs.getInt("capacity") + "\nAverage combustion: " + rs.getDouble("combustion") + "\n");
        }
    }

    public void removePlanes() throws SQLException {
        deletePersonsPStmt.executeUpdate();
    }

    public boolean addAllPlanes(List<Plane> planes) {

        try {
            connection.setAutoCommit(false);

            for (Plane plane : planes) {
                addPlane(plane);
            }

            connection.commit();

        } catch (SQLException e) {
            try {
                connection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }

        return true;
    }
}
